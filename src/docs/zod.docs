
[메모]
object에 email속성도 존재

zod의 infer과 JS의 `typeof` 연산자를 사용해서 이미 정의한 스키마로 부터 타입을 추출
정의한 스키마를 zodResolver의 인수로 넣어준다

refine
까다로운 유효성검증을 도와주는 메서드?
ctx.addIssue에서의 path는 발생한 이슈(에러)가 해당하는 데이터의 경로를 나타냄
Issue를 생성할 수 있는 ctx객체
 formState.errors.password.messages에

password not matched가 나타나게됩니다.


[설정]
zodResolver설치
add zod @hookform/resolvers

zodResolver는 react-hook-form에서 제공하는 Zod 스키마를 이용하여 유효성 검사를 수행하는 Resolver입니다. 
이를 사용하면 Zod 스키마에 따라 폼 필드의 유효성을 간편하게 검사할 수 있습니다.


---
RHF

register는 usrForm에 input 요소를 등록하는 역할을 합니다.
UseFormRegister라는 함수 타입으로 정의되어 있습니다.

참고
https://velog.io/@qhflrnfl4324/string-%ED%98%95%EC%8B%9D%EC%9D%98-%EC%9D%B8%EC%88%98%EB%8A%94-...-%ED%98%95%EC%8B%9D%EC%9D%98-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98%EC%97%90-%ED%95%A0%EB%8B%B9%EB%90%A0-%EC%88%98-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4.-TypeScript

----


<zod + react-hook-form>

zod와 react-hook-form을 함께 사용하는 이유는 다양하며, 주요 이점은 다음과 같습니다:

1. 타입 안정성(Type Safety): 
zod는 TypeScript와 함께 사용하기에 용이한 스키마 기반 검증 라이브러리

react-hook-form => 입력 필드의 값과 에러 상태를 관리 
zod => 데이터의 형식을 명확하게 정의

이는 런타임에 발생할 수 있는 타입 관련 에러를 사전에 방지하고, 높은 수준의 코드 안정성을 제공합니다.

2. 검증 로직의 중복 제거: 
react-hook-form을 사용하면 입력 필드의 상태 및 제어 로직을 관리가능
+ zod를 함께 사용하면 데이터의 스키마 기반 검증을 쉽게 정의
+ 중복된 검증 로직을 컴포넌트에서 관리할 필요가 없음

3. 폼 제출 및 유효성 검사의 일관성: 
react-hook-form은 폼의 제출과 유효성 검사를 간편하게 처리할 수 있는 기능을 제공
zod를 사용하면 서버로 전송되는 데이터의 유효성 검사를 동일한 스키마로 일관성 있게 수행 가능

4. 컴포넌트 간의 데이터 일관성 유지: 
폼의 여러 부분을 독립적인 컴포넌트로 나누어 작성할 때, 
각 컴포넌트는 자체적으로 zod 스키마를 기반으로 한 유효성 검사를 수행할 수 있음
이로써 각 부분이 일관된 데이터 구조를 유지, 
+ 전체 폼에서 일관성 있는 유효성 검사가 가능함

5. 에러 메시지 관리: 
zod는 검증 실패 시 발생하는 에러에 대한 자세한 정보를 제공
react-hook-form과 함께 사용하면 폼의 각 입력 필드에 대한 에러 메시지를 쉽게 표시하고 관리 가능

이러한 이유들로 인해 zod와 react-hook-form은 서로 보완적이며 효율적으로 사용될 수 있습니다.



---
zod와 yup은 둘 다 JavaScript나 TypeScript에서 사용하는 스키마 및 유효성 검사 라이브러리입니다만, 몇 가지 차이점이 있습니다.

타입스크립트 지원
zod: zod는 타입스크립트와의 통합이 강력하며, z 객체를 사용하여 스키마를 정의하고 해당 스키마를 기반으로 타입을 생성할 수 있습니다.
yup: yup도 타입스크립트를 지원하지만, zod만큼 강력한 타입 시스템을 제공하지는 않습니다.


코드 간결성
zod: 상대적으로 간결한 구문을 가지고 있으며, .refine 및 .superRefine와 같은 기능을 사용하여 고급 유효성 검사를 쉽게 추가할 수 있습니다.
yup: yup은 기본적으로 메서드 체인을 사용하여 스키마를 구성합니다. 이것은 명시적이고 강력한 유효성 검사를 제공할 수 있지만, 코드가 길어질 수 있습니다.

확장성
zod: zod는 모듈식이며, .extend를 사용하여 스키마를 확장할 수 있습니다.
yup: yup은 .shape 메서드를 사용하여 스키마를 구성하므로 조금 더 직접적인 구조를 가지고 있습니다.

커뮤니티 및 문서
zod: zod도 인기 있는 라이브러리이지만, 커뮤니티 규모는 yup보다 작을 수 있습니다. 그러나 여전히 활발한 개발이 이루어지고 있습니다.
yup: yup은 매우 인기 있는 라이브러리이며, 풍부한 커뮤니티와 문서를 가지고 있습니다. 많은 예제와 지원 자료를 찾을 수 있습니다.